// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"local_dns_proxy/internal/models"
)

func newDNSTable(db *gorm.DB, opts ...gen.DOOption) dNSTable {
	_dNSTable := dNSTable{}

	_dNSTable.dNSTableDo.UseDB(db, opts...)
	_dNSTable.dNSTableDo.UseModel(&models.DNSTable{})

	tableName := _dNSTable.dNSTableDo.TableName()
	_dNSTable.ALL = field.NewAsterisk(tableName)
	_dNSTable.ID = field.NewInt64(tableName, "id")
	_dNSTable.Protocol = field.NewString(tableName, "protocol")
	_dNSTable.Domain = field.NewString(tableName, "domain")
	_dNSTable.IP = field.NewString(tableName, "ip")
	_dNSTable.Port = field.NewString(tableName, "port")
	_dNSTable.Status = field.NewInt(tableName, "status")
	_dNSTable.CreatedAt = field.NewTime(tableName, "created_at")
	_dNSTable.UpdatedAt = field.NewTime(tableName, "updated_at")

	_dNSTable.fillFieldMap()

	return _dNSTable
}

type dNSTable struct {
	dNSTableDo

	ALL       field.Asterisk
	ID        field.Int64  // ID，主键
	Protocol  field.String // 协议
	Domain    field.String // 域名
	IP        field.String // IP地址
	Port      field.String // 端口
	Status    field.Int    // 状态：Enable启用，Disable禁用
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (d dNSTable) Table(newTableName string) *dNSTable {
	d.dNSTableDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dNSTable) As(alias string) *dNSTable {
	d.dNSTableDo.DO = *(d.dNSTableDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dNSTable) updateTableName(table string) *dNSTable {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.Protocol = field.NewString(table, "protocol")
	d.Domain = field.NewString(table, "domain")
	d.IP = field.NewString(table, "ip")
	d.Port = field.NewString(table, "port")
	d.Status = field.NewInt(table, "status")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")

	d.fillFieldMap()

	return d
}

func (d *dNSTable) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dNSTable) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 8)
	d.fieldMap["id"] = d.ID
	d.fieldMap["protocol"] = d.Protocol
	d.fieldMap["domain"] = d.Domain
	d.fieldMap["ip"] = d.IP
	d.fieldMap["port"] = d.Port
	d.fieldMap["status"] = d.Status
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
}

func (d dNSTable) clone(db *gorm.DB) dNSTable {
	d.dNSTableDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dNSTable) replaceDB(db *gorm.DB) dNSTable {
	d.dNSTableDo.ReplaceDB(db)
	return d
}

type dNSTableDo struct{ gen.DO }

func (d dNSTableDo) Debug() *dNSTableDo {
	return d.withDO(d.DO.Debug())
}

func (d dNSTableDo) WithContext(ctx context.Context) *dNSTableDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dNSTableDo) ReadDB() *dNSTableDo {
	return d.Clauses(dbresolver.Read)
}

func (d dNSTableDo) WriteDB() *dNSTableDo {
	return d.Clauses(dbresolver.Write)
}

func (d dNSTableDo) Session(config *gorm.Session) *dNSTableDo {
	return d.withDO(d.DO.Session(config))
}

func (d dNSTableDo) Clauses(conds ...clause.Expression) *dNSTableDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dNSTableDo) Returning(value interface{}, columns ...string) *dNSTableDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dNSTableDo) Not(conds ...gen.Condition) *dNSTableDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dNSTableDo) Or(conds ...gen.Condition) *dNSTableDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dNSTableDo) Select(conds ...field.Expr) *dNSTableDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dNSTableDo) Where(conds ...gen.Condition) *dNSTableDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dNSTableDo) Order(conds ...field.Expr) *dNSTableDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dNSTableDo) Distinct(cols ...field.Expr) *dNSTableDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dNSTableDo) Omit(cols ...field.Expr) *dNSTableDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dNSTableDo) Join(table schema.Tabler, on ...field.Expr) *dNSTableDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dNSTableDo) LeftJoin(table schema.Tabler, on ...field.Expr) *dNSTableDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dNSTableDo) RightJoin(table schema.Tabler, on ...field.Expr) *dNSTableDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dNSTableDo) Group(cols ...field.Expr) *dNSTableDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dNSTableDo) Having(conds ...gen.Condition) *dNSTableDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dNSTableDo) Limit(limit int) *dNSTableDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dNSTableDo) Offset(offset int) *dNSTableDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dNSTableDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *dNSTableDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dNSTableDo) Unscoped() *dNSTableDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dNSTableDo) Create(values ...*models.DNSTable) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dNSTableDo) CreateInBatches(values []*models.DNSTable, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dNSTableDo) Save(values ...*models.DNSTable) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dNSTableDo) First() (*models.DNSTable, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.DNSTable), nil
	}
}

func (d dNSTableDo) Take() (*models.DNSTable, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.DNSTable), nil
	}
}

func (d dNSTableDo) Last() (*models.DNSTable, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.DNSTable), nil
	}
}

func (d dNSTableDo) Find() ([]*models.DNSTable, error) {
	result, err := d.DO.Find()
	return result.([]*models.DNSTable), err
}

func (d dNSTableDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.DNSTable, err error) {
	buf := make([]*models.DNSTable, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dNSTableDo) FindInBatches(result *[]*models.DNSTable, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dNSTableDo) Attrs(attrs ...field.AssignExpr) *dNSTableDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dNSTableDo) Assign(attrs ...field.AssignExpr) *dNSTableDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dNSTableDo) Joins(fields ...field.RelationField) *dNSTableDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dNSTableDo) Preload(fields ...field.RelationField) *dNSTableDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dNSTableDo) FirstOrInit() (*models.DNSTable, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.DNSTable), nil
	}
}

func (d dNSTableDo) FirstOrCreate() (*models.DNSTable, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.DNSTable), nil
	}
}

func (d dNSTableDo) FindByPage(offset int, limit int) (result []*models.DNSTable, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dNSTableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dNSTableDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dNSTableDo) Delete(models ...*models.DNSTable) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dNSTableDo) withDO(do gen.Dao) *dNSTableDo {
	d.DO = *do.(*gen.DO)
	return d
}
