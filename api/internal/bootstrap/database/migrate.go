// Code generated by buildx tool. DO NOT EDIT.
// Code generated by buildx tool. DO NOT EDIT.
// Code generated by buildx tool. DO NOT EDIT.

package database

import (
	"errors"
	"fmt"
	"local_dns_proxy/internal/bootstrap/database/initdata"
	"local_dns_proxy/internal/models"
	"local_dns_proxy/internal/infrastructure/query"
	"gorm.io/gorm"
	"reflect"
	"strings"
)

// autoMigrateWithComments 数据库迁移
// 自动迁移数据库表结构，支持添加表注释
//
// 参数:
//   - db: *gorm.DB 数据库连接
//   - tables: []interface{} 表结构体指针和表注释
//
// 返回值:
//   - bool: 迁移是否成功，true表示有错误(有失败)，false表示无错误(全部成功)
//
// 注意:
//   - 该函数会自动迁移数据库表结构，支持添加表注释
//   - 迁移失败时，会记录错误日志
func autoMigrateWithComments(db *gorm.DB, tables ...interface{}) error {
	for _, table := range tables {
		t := reflect.TypeOf(table)
		comment := t.Name()
		if method, ok := t.MethodByName("TableComment"); ok {
			comment = method.Func.Call([]reflect.Value{reflect.ValueOf(table)})[0].String()
		}
		if strings.EqualFold(db.Name(), "MySQL") {
			if err := db.Set("gorm:table_options", fmt.Sprintf(" COMMENT='%s';", comment)).AutoMigrate(table); err != nil {
				return errors.New(fmt.Sprintf("[(%s)%s]数据库迁移失败: %s，错误信息:%s", t.Name(), comment, t.PkgPath(), err.Error()))
			}
		} else {
			if err := db.AutoMigrate(table); err != nil {
				return errors.New(fmt.Sprintf("[(%s)%s]数据库迁移失败: %s，错误信息:%s", t.Name(), comment, t.PkgPath(), err.Error()))
			}
		}
	}
	return nil
}

// AutoMigrate 数据库迁移
// 自动迁移数据库表结构，支持添加表注释
//
// 参数:
//   - db: *gorm.DB 数据库连接
//   - dbq: *query.Query 查询对象
//   - router: []core.RoutesInfo 路由信息
//
// 返回值:
//   - error: 迁移错误
func AutoMigrate(db *gorm.DB, dbq *query.Query) error {
	err := autoMigrateWithComments(db,
		&models.DNSTable{},
	)

	if err != nil {
		return err
	}
	
	v := reflect.ValueOf(&initdata.InitData{Q: query.Q})
	for i := 0; i < v.NumMethod(); i++ {
		v.Method(i).Call(nil)
	}
	return nil
}